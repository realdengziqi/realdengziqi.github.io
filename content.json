{"meta":{"title":"邓子琦|个人主页","subtitle":"","description":"邓子琦的个人主页，致力于一切关于数据的知识分享","author":"小卖部书记","url":"http://81.80.203.121","root":"/"},"pages":[{"title":"归档","date":"2021-06-13T10:54:57.267Z","updated":"2021-06-11T17:25:42.000Z","comments":true,"path":"archives/index.html","permalink":"http://81.80.203.121/archives/index.html","excerpt":"","text":""},{"title":"专题","date":"2021-06-13T10:54:57.281Z","updated":"2021-06-11T17:20:22.000Z","comments":true,"path":"series/index.html","permalink":"http://81.80.203.121/series/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-06-13T10:54:57.296Z","updated":"2021-06-11T12:00:36.000Z","comments":true,"path":"tags/index.html","permalink":"http://81.80.203.121/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"关于我","slug":"about","date":"2021-06-12T03:51:24.000Z","updated":"2021-06-11T17:34:58.000Z","comments":true,"path":"post/about.html","link":"","permalink":"http://81.80.203.121/post/about.html","excerpt":"","text":"个人介绍··· 省略","categories":[],"tags":[{"name":"关于我","slug":"关于我","permalink":"http://81.80.203.121/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"}]},{"title":"友链","slug":"link","date":"2021-06-12T03:51:24.000Z","updated":"2021-06-11T17:41:52.000Z","comments":true,"path":"post/link.html","link":"","permalink":"http://81.80.203.121/post/link.html","excerpt":"","text":"互粉注意","categories":[],"tags":[{"name":"友链","slug":"友链","permalink":"http://81.80.203.121/tags/%E5%8F%8B%E9%93%BE/"}]},{"title":"测试文章","slug":"bGnanEwvCE0G8VBM","date":"2021-06-11T09:11:02.000Z","updated":"2021-06-11T09:11:04.000Z","comments":true,"path":"post/bGnanEwvCE0G8VBM.html","link":"","permalink":"http://81.80.203.121/post/bGnanEwvCE0G8VBM.html","excerpt":"","text":"[Python&amp;小知识]zip()函数的真实含义是拉链——Python中的并行遍历本文目录 写本文的原因 一个简单的例子 图解zip() 写文本的原因我今天发现有些人对Python中zip函数的理解是压缩。这其实误解了zip的作用。 在python里面，zip其实就是字面意思 拉链 ! 直接上例子先定义两个列表，代码如下 123456789x = [1,2,3,4]y = [&quot;小明&quot;,&quot;小张&quot;,&quot;小王&quot;,&quot;小李&quot;]print(&quot;我开始拉拉链了&quot;)# for循环开始for num,name in zip(x,y): print(num,name)# for循环结束print(&quot;我拉完了&quot;) 运行输出: 12345678&quot;&quot;&quot;我开始拉拉链了1 小明2 小张3 小王4 小李我拉完了&quot;&quot;&quot; 不妨再看看zip(x,y)生成列表之后的结果 123print(list(zip(x,y)))#其实之所以能够并行遍历其实还跟python里# 的元组解包有关系 运行输出： 123&quot;&quot;&quot;[(1,&quot;小明&quot;),(2,&quot;小张“),(3,&quot;小王&quot;),(4,&quot;小李&quot;)]&quot;&quot;&quot; 这是一个很基础的并行遍历zip(x,y)使得for循环可以并行地遍历完两个列表。不过为什么叫拉链呢？ 因为它本身就是拉链啊！ 图解zip() 别再以为zip函数是压缩了，真的一点关系都没有！","categories":[{"name":"Python","slug":"Python","permalink":"http://81.80.203.121/categories/Python/"}],"tags":[]},{"title":"","slug":"Untitled","date":"2021-06-11T05:47:00.000Z","updated":"2021-06-11T05:57:10.000Z","comments":true,"path":"post/Untitled.html","link":"","permalink":"http://81.80.203.121/post/Untitled.html","excerpt":"","text":"title: TensorFlow入门(一) - mnist手写数字识别(网络搭建)date: 2017-12-09 11:51:24description: TensorFlow 入门系列文章，mnist手写数字识别(网络搭建)。tags: 机器学习 tensorflow mnist Pythonnav: TensorFlowcategories: TensorFlow教程top: 1github: https://github.com/geektutu/tensorflow-tutorial-samplesimage: https://mypic-1302242504.cos.ap-nanjing.myqcloud.com/image-20210514030546893.png 本文目录 案例数据 辅助列VLOOKUP方法 VLOOKUP数组公式方法 SUMIFS方法 案例数据源数据表姓名和年级共同组成唯一ID，比如高一和高二年级都有张三，这时可以通过年级分别出到底是哪个张三 姓名 年级 成绩 张三 高一 60 张前 高一 61 李四 高二 62 王五 高三 63 张三 高二 70 查询表现在要依据姓名和年级从源数据表中查询成绩 姓名 年级 成绩 张三 高一 李四 高二 张三 高三 李四 高一 总览 辅助列VLOOKUP方法辅助列的VLOOKUP查询方法很简单，其实就是把两列合并。然后用VLOOKUP查询就行了。结果如图 各单元格对应的公式如下。 1234567A2 //源数据表建立辅助列=B2&amp;&quot;-&quot;&amp;C2---F2 //查询表建立=G2&amp;&quot;-&quot;&amp;H2---=VLOOKUP(F2,$A$2:$D$6,4,0) // 使用vlookup公式对 知识点 &amp;符号表示“and”能够将两个单元格里的内容拼接到一个单元格中。 VLOOKUP数组公式方法数组公式的优势在于可以隐藏辅助列，如果你的表不仅要多列查询，还要注重排版美观以供打印，那么这个方法会帮到你。 我们先给出要用到的函数和最后的执行结果，然后一步步讲解发生了什么。 12H2 // 最终的vlookup数组公式=VLOOKUP(F2&amp;G2,IF(&#123;1,0&#125;,$A$2:$A$6&amp;$B$2:$B$6,$C$2:$C$6),2,0) F2&amp;G2这是VLOOKUP中的第一个函数，用来将查询表中的 姓名 和 年级 合并起来。 第二个参数的IF函数是个难点，想要知道它干了什么，我们需要先学习Excel中的数组概念。 Excel中的数组对象试着在单元格里输入下面这行内容 1=&#123;1,0,3&#125; 你会发现这串数字秒变一张表。 这其实是一个横向的数组，在Excel中数组可以把一堆元素合起来作为函数的数据来进行运算。 我们再做个实验。用IF函数来引用下表的D列和E列的内容，但只改变第一个用作判断条件的参数。 接下来看实验的结果。 注意=IF(&#123;1,0&#125;,D4,E4)让我们同时得到了D和E列的两个内容。也就是说，我们得到了一个数组。 当数组传入函数时，这里IF函数其实对数组的内容，也就是1和0，分别进行了计算。结果为1时，我们得到D列的内容，结果为0时，得到E列的内容。最终得到了一个数组。 接下来我们就好理解VLOOKUP里的IF函数在干什么了。 IF函数干了什么1= IF(&#123;1,0&#125;,$A$2:$A$6&amp;$B$2:$B$6,$C$2:$C$6) 不妨先把这个函数放到单元格里看看会出什么内容。 这样就明白数组公式的原理了。 我们用$A$2:$A$6&amp;$B$2:$B$6将源数据表的 姓名 和 年级 列拼接成一列。 IF函数使用&#123;1,0&#125;将拼好的列与要查询的数据组合成一张表。 将组合的新表传给VLOOKUP函数，让它从这里面找。 所以VLOOKUP的第一个参数为F2&amp;G2，并且第三个参数为2，因为这对应了中间表的第二列 这里做了一个数组公式的查询流程。 SUMIFS方法最后介绍一个最简单的方法，sumifs。sumifs函数可以实现多条件的求和。我们可以使用条件来匹配成绩，最终不让他相加，这样就可以得到查询结果不是吗。 用到的公式如下 1=SUMIFS($C$2:$C$6,$A$2:$A$6,F2,$B$2:$B$6,G2) 也就是在C列（源数据的成绩）里按条件求和，这个条件是F列的内容等于A列的，且G列的内容等于B列的。 结果如图 不过这里需要注意，用SUMIFS来进行查询，没有查询到会得到数字0。如果无和0是不同含义的话，这时就会产生混淆。 本文缘起回答群友问题 点击 阅读原文 可获得本文案例文件 提取码：4fau。","categories":[{"name":"Excel","slug":"Excel","permalink":"http://81.80.203.121/categories/Excel/"}],"tags":[],"author":"小卖部书记"},{"title":"TensorFlow入门(一) - mnist手写数字识别(网络搭建)","slug":"2017-12-09-TensorFlow入门(一)---mnist手写数字识别(网络搭建)","date":"2017-12-09T03:51:24.000Z","updated":"2021-06-11T05:58:02.000Z","comments":true,"path":"post/2017-12-09-TensorFlow入门(一)---mnist手写数字识别(网络搭建).html","link":"","permalink":"http://81.80.203.121/post/2017-12-09-TensorFlow%E5%85%A5%E9%97%A8(%E4%B8%80)---mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB(%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA).html","excerpt":"","text":"本文目录 案例数据 辅助列VLOOKUP方法 VLOOKUP数组公式方法 SUMIFS方法 案例数据源数据表姓名和年级共同组成唯一ID，比如高一和高二年级都有张三，这时可以通过年级分别出到底是哪个张三 姓名 年级 成绩 张三 高一 60 张前 高一 61 李四 高二 62 王五 高三 63 张三 高二 70 查询表现在要依据姓名和年级从源数据表中查询成绩 姓名 年级 成绩 张三 高一 李四 高二 张三 高三 李四 高一 总览 辅助列VLOOKUP方法辅助列的VLOOKUP查询方法很简单，其实就是把两列合并。然后用VLOOKUP查询就行了。结果如图 各单元格对应的公式如下。 1234567A2 //源数据表建立辅助列=B2&amp;&quot;-&quot;&amp;C2---F2 //查询表建立=G2&amp;&quot;-&quot;&amp;H2---=VLOOKUP(F2,$A$2:$D$6,4,0) // 使用vlookup公式对 知识点 &amp;符号表示“and”能够将两个单元格里的内容拼接到一个单元格中。 VLOOKUP数组公式方法数组公式的优势在于可以隐藏辅助列，如果你的表不仅要多列查询，还要注重排版美观以供打印，那么这个方法会帮到你。 我们先给出要用到的函数和最后的执行结果，然后一步步讲解发生了什么。 12H2 // 最终的vlookup数组公式=VLOOKUP(F2&amp;G2,IF(&#123;1,0&#125;,$A$2:$A$6&amp;$B$2:$B$6,$C$2:$C$6),2,0) F2&amp;G2这是VLOOKUP中的第一个函数，用来将查询表中的 姓名 和 年级 合并起来。 第二个参数的IF函数是个难点，想要知道它干了什么，我们需要先学习Excel中的数组概念。 Excel中的数组对象试着在单元格里输入下面这行内容 1=&#123;1,0,3&#125; 你会发现这串数字秒变一张表。 这其实是一个横向的数组，在Excel中数组可以把一堆元素合起来作为函数的数据来进行运算。 我们再做个实验。用IF函数来引用下表的D列和E列的内容，但只改变第一个用作判断条件的参数。 接下来看实验的结果。 注意=IF(&#123;1,0&#125;,D4,E4)让我们同时得到了D和E列的两个内容。也就是说，我们得到了一个数组。 当数组传入函数时，这里IF函数其实对数组的内容，也就是1和0，分别进行了计算。结果为1时，我们得到D列的内容，结果为0时，得到E列的内容。最终得到了一个数组。 接下来我们就好理解VLOOKUP里的IF函数在干什么了。 IF函数干了什么1= IF(&#123;1,0&#125;,$A$2:$A$6&amp;$B$2:$B$6,$C$2:$C$6) 不妨先把这个函数放到单元格里看看会出什么内容。 这样就明白数组公式的原理了。 我们用$A$2:$A$6&amp;$B$2:$B$6将源数据表的 姓名 和 年级 列拼接成一列。 IF函数使用&#123;1,0&#125;将拼好的列与要查询的数据组合成一张表。 将组合的新表传给VLOOKUP函数，让它从这里面找。 所以VLOOKUP的第一个参数为F2&amp;G2，并且第三个参数为2，因为这对应了中间表的第二列 这里做了一个数组公式的查询流程。 SUMIFS方法最后介绍一个最简单的方法，sumifs。sumifs函数可以实现多条件的求和。我们可以使用条件来匹配成绩，最终不让他相加，这样就可以得到查询结果不是吗。 用到的公式如下 1=SUMIFS($C$2:$C$6,$A$2:$A$6,F2,$B$2:$B$6,G2) 也就是在C列（源数据的成绩）里按条件求和，这个条件是F列的内容等于A列的，且G列的内容等于B列的。 结果如图 不过这里需要注意，用SUMIFS来进行查询，没有查询到会得到数字0。如果无和0是不同含义的话，这时就会产生混淆。 本文缘起回答群友问题 点击 阅读原文 可获得本文案例文件 提取码：4fau。","categories":[{"name":"TensorFlow教程","slug":"TensorFlow教程","permalink":"http://81.80.203.121/categories/TensorFlow%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://81.80.203.121/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"tensorflow","slug":"tensorflow","permalink":"http://81.80.203.121/tags/tensorflow/"},{"name":"mnist","slug":"mnist","permalink":"http://81.80.203.121/tags/mnist/"},{"name":"Python","slug":"Python","permalink":"http://81.80.203.121/tags/Python/"}]}],"categories":[{"name":"Python","slug":"Python","permalink":"http://81.80.203.121/categories/Python/"},{"name":"Excel","slug":"Excel","permalink":"http://81.80.203.121/categories/Excel/"},{"name":"TensorFlow教程","slug":"TensorFlow教程","permalink":"http://81.80.203.121/categories/TensorFlow%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"关于我","slug":"关于我","permalink":"http://81.80.203.121/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"},{"name":"友链","slug":"友链","permalink":"http://81.80.203.121/tags/%E5%8F%8B%E9%93%BE/"},{"name":"机器学习","slug":"机器学习","permalink":"http://81.80.203.121/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"tensorflow","slug":"tensorflow","permalink":"http://81.80.203.121/tags/tensorflow/"},{"name":"mnist","slug":"mnist","permalink":"http://81.80.203.121/tags/mnist/"},{"name":"Python","slug":"Python","permalink":"http://81.80.203.121/tags/Python/"}]}